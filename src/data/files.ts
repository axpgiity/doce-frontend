export const documentationFiles = {
  files: [
    {
            "documentation": "**Class: TheFoodCourtAppApplication**\n\n**Purpose:**\n- Starting point of the Spring Boot application.\n- Loads the application context and starts the web application.\n\n**Method: main**\n\n**Functionality:**\n- Sets up the Spring application context and bootstraps the application.\n\n**Parameters:**\n- `args`: Arguments passed to the application during startup.\n\n**Return Value:**\n- None\n\n**Logic:**\n- Initializes the Spring application context and starts the web server.\n- The application context contains the configuration and beans necessary for running the application.",
            "file_path": "C:\\Users\\KIIT\\AppData\\Local\\Temp\\T_rex\\main\\java\\com\\axp\\fcs\\TheFoodCourtAppApplication.java"
        },
        {
            "documentation": "### Class `AdminerController`\n**Purpose:** This class handles the adminer route on the server-side.\n\n**Methods:**\n- `adminer()`: Redirects to the `adminer` page when this route is hit.\n\n**Parameters:** None\n\n**Return Value:**\n\n```java\nString\n```\n\nA redirect to the Adminer page.\n\n**Logic:** This method simply redirects the user to the Adminer page.",
            "file_path": "C:\\Users\\KIIT\\AppData\\Local\\Temp\\T_rex\\main\\java\\com\\axp\\fcs\\controller\\AdminerController.java"
        },
        {
            "documentation": "## **Classes**\n\n### **FoodCourtController**\n\n- **Purpose**: The FoodCourtController class is a Spring MVC controller that provides RESTful endpoints for managing food courts.\n\n- **Methods**:\n\n  - **getFoodCourts:** Returns a list of all active food courts in the system.\n  \n    - **Parameters:** None\n    - **Return Value:** A list of FoodCourt objects\n    - **Logic:** Calls the activeFoodCourts method of the FoodCourtService to retrieve a list of active food courts.\n\n### **FoodCourt**\n\n- **Purpose**: Represents a food court in the system.\n\n- **No methods defined in the given code.**\n\n### **FoodCourtService**\n\n- **Purpose**: Provides business logic for managing food courts.\n\n- **Methods**:\n  \n  - **getActiveFoodCourts:** Returns a list of all active food courts in the system.\n  \n    - **Parameters:** None\n    - **Return Value:** A list of FoodCourt objects\n    - **Logic:** **This method is not defined in the given code.**",
            "file_path": "C:\\Users\\KIIT\\AppData\\Local\\Temp\\T_rex\\main\\java\\com\\axp\\fcs\\controller\\FoodCourtController.java"
        },
        {
            "documentation": "**Class: VendorController**\n\n**Purpose:**\n- This class serves as a controller for managing vendors within the application.\n\n**Methods:**\n\nNone defined within the provided code snippet.\n\n**Fields:**\n\nNone defined within the provided code snippet.\n\n**Other Constructs:**\n\nNone defined within the provided code snippet.\n\n**Additional Notes:**\n\n- The purpose of the class can be inferred from its name and the fact that it is located in a package related to vendor management.\n- However, the provided code snippet does not contain any actual implementation for vendor management functionality.\n- It is likely that this class would be extended or contain additional methods and logic to provide the desired functionality in a production environment.",
            "file_path": "C:\\Users\\KIIT\\AppData\\Local\\Temp\\T_rex\\main\\java\\com\\axp\\fcs\\controller\\VendorController.java"
        },
        {
            "documentation": "**Class: FoodCategory**\n\n**Purpose:**\nRepresents a category of food items, such as 'momo', 'biryani', etc.\n\n**Methods:**\n\n**Getters:**\n- `getId()`: Gets the unique identifier for the category.\n- `getName()`: Gets the name of the category.\n- `getDescription()`: Gets the description of the category (optional).\n- `getIsActive()`: Gets whether the category is active.\n- `getImageUrl()`: Gets the URL of the image representing the category (optional).\n\n**Setters:**\n- `setId(Long id)`: Sets the unique identifier for the category.\n- `setName(String name)`: Sets the name of the category.\n- `setDescription(String description)`: Sets the description of the category (optional).\n- `setIsActive(Boolean isActive)`: Sets whether the category is active.\n- `setImageUrl(String imageUrl)`: Sets the URL of the image representing the category (optional).\n\n**Constructor:**\n- `FoodCategory()`: Default constructor.\n- `FoodCategory(String name, String description, String imageUrl, Boolean isActive)`: Constructor that sets the properties of the category.\n\n**Additional Notes:**\n- The class uses annotations like `@Entity`, `@Id`, and `@GeneratedValue` for JPA mapping.\n- The `@NotBlank` annotation ensures that the category name cannot be empty.\n- The `isActive` field is useful for soft deletes or temporarily disabling categories.\n- You could also include an image URL field if you want to associate images with categories.\n- You can override `toString`, `equals`, and `hashCode` methods if necessary.",
            "file_path": "C:\\Users\\KIIT\\AppData\\Local\\Temp\\T_rex\\main\\java\\com\\axp\\fcs\\model\\FoodCategory.java"
        },
        {
            "documentation": "**Class: FoodCourt**\n\n**Purpose:** Represents an entity for managing food court information.\n\n**Fields:**\n\n- **id:** The unique identifier for the food court. (Primary key)\n- **name:** The name of the food court.\n- **imageUrl:** The URL of an image representing the food court.\n- **location:** The location of the food court.\n- **active:** A flag indicating whether the food court is active or not.\n\n**Methods:**\n\n**Getters:**\n\n- **getId()**: Returns the food court's ID.\n- **getName()**: Returns the food court's name.\n- **getImageUrl()**: Returns the URL of the food court's image.\n- **getLocation()**: Returns the food court's location.\n- **isActive()**: Returns whether the food court is active.\n\n**Setters:**\n\n- **setId(long id)**: Sets the food court's ID.\n- **setName(String name)**: Sets the food court's name.\n- **setImageUrl(String imageUrl)**: Sets the URL of the food court's image.\n- **setLocation(String location)**: Sets the food court's location.\n- **setActive(boolean active)**: Sets the food court's active status.",
            "file_path": "C:\\Users\\KIIT\\AppData\\Local\\Temp\\T_rex\\main\\java\\com\\axp\\fcs\\model\\FoodCourt.java"
        },
        {
            "documentation": "**Class FoodVendor**\n- **Purpose:** Represents a food vendor in a food court.\n\n**Fields:**\n- **id**: The unique identifier of the vendor. (auto-generated)\n- **name**: The name of the vendor.\n- **contactNumber**: The contact number of the vendor.\n- **email**: The email address of the vendor.\n- **foodCourt**: The food court to which the vendor belongs.\n- **menuItems**: The list of menu items offered by the vendor.\n\n**Methods:**\n- **getId()**: Returns the ID of the vendor.\n- **setId(Long id)**: Sets the ID of the vendor.\n- **getName()**: Returns the name of the vendor.\n- **setName(String name)**: Sets the name of the vendor.\n- **getContactNumber()**: Returns the contact number of the vendor.\n- **setContactNumber(String contactNumber)**: Sets the contact number of the vendor.\n- **getEmail()**: Returns the email address of the vendor.\n- **setEmail(String email)**: Sets the email address of the vendor.\n- **getFoodCourt()**: Returns the food court associated with the vendor.\n- **setFoodCourt(FoodCourt foodCourt)**: Sets the food court associated with the vendor.\n- **getMenuItems()**: Returns the list of menu items offered by the vendor.\n- **setMenuItems(List<MenuItem> menuItems)**: Sets the list of menu items offered by the vendor.",
            "file_path": "C:\\Users\\KIIT\\AppData\\Local\\Temp\\T_rex\\main\\java\\com\\axp\\fcs\\model\\FoodVendor.java"
        },
        {
            "documentation": "**Class: MenuItem**\n\n**Purpose:**\nRepresents a menu item, which contains information such as its name, description, price, vendor, category, and availability.\n\n**Methods:**\n\n**getId:**\n- Returns the unique identifier of the menu item.\n\n**setId:**\n- Sets the unique identifier of the menu item.\n\n**getName:**\n- Returns the name of the menu item.\n\n**setName:**\n- Sets the name of the menu item.\n\n**getDescription:**\n- Returns the description of the menu item.\n\n**setDescription:**\n- Sets the description of the menu item.\n\n**getPrice:**\n- Returns the price of the menu item.\n\n**setPrice:**\n- Sets the price of the menu item.\n\n**getVendor:**\n- Returns the vendor (FoodVendor object) of the menu item.\n\n**setVendor:**\n- Sets the vendor of the menu item.\n\n**getFoodCategory:**\n- Returns the food category (FoodCategory object) of the menu item.\n\n**setFoodCategory:**\n- Sets the food category of the menu item.\n\n**isAvailable:**\n- Returns whether the menu item is available or not.\n\n**setAvailable:**\n- Sets whether the menu item is available.\n\n**Additional Notes:**\n\n- The class is annotated with `@Entity`, which indicates that it is a JPA entity class.\n- The `id` field is annotated with `@Id` and `@GeneratedValue`, indicating that it is the primary key and will be generated automatically.\n- The `vendor` and `foodCategory` fields are annotated with `@ManyToOne`, indicating that they are many-to-one relationships to other entities (FoodVendor and FoodCategory, respectively).",
            "file_path": "C:\\Users\\KIIT\\AppData\\Local\\Temp\\T_rex\\main\\java\\com\\axp\\fcs\\model\\MenuItem.java"
        },
        {
            "documentation": "**Class:** `FoodCourtRepository`\n\n**Purpose:** This repository interface provides CRUD operations for the `FoodCourt` entity and supports additional JPA-based query methods.\n\n**Methods:**\n\n- **`findByActiveTrue()`:**\n   - **Functionality:** Derives a query to find all `FoodCourt` entities with the `active` property set to `true`.\n   - **Parameters:** None\n   - **Return Value:** A list of `FoodCourt` entities with `active` set to `true`\n\n**Additional Notes:**\n\n- This repository interface extends `JpaRepository`, which provides a set of common CRUD operations for entities.\n- The `findByActiveTrue()` method is a derived query method, which leverages JPA's naming convention to automatically generate a query based on the method name.",
            "file_path": "C:\\Users\\KIIT\\AppData\\Local\\Temp\\T_rex\\main\\java\\com\\axp\\fcs\\repository\\FoodCourtRepository.java"
        },
        {
            "documentation": "**Class: FoodVendorRepository**\n\n**Purpose:**\nThis interface provides repository functionality for managing `FoodVendor` entities and provides CRUD operations, as well as additional custom methods, for interacting with the database. It extends the `JpaRepository` for `FoodVendor` with `Long` as its ID type.\n\n**Methods:**\n\n* **findByFoodCourtId(Long foodCourtId):**\n - **Parameters:**\n   - `foodCourtId`: The ID of the food court to search for associated food vendors.\n - **Return Value:**\n   - A list of `FoodVendor` objects associated with the provided `foodCourtId`.\n - **Logic:**\n   - Executes a database query to fetch all `FoodVendor` objects where the `foodCourtId` property matches the provided ID.\n\n**Additional Notes:**\n\n* This interface inherits commonly used CRUD methods (create, read, update, delete) from the `JpaRepository` superclass.",
            "file_path": "C:\\Users\\KIIT\\AppData\\Local\\Temp\\T_rex\\main\\java\\com\\axp\\fcs\\repository\\FoodVendorRepository.java"
        },
        {
            "documentation": "## Class: `com.axp.fcs.repository.MenuItemRepository`\n\n**Purpose:**\nThis interface defines the repository for managing `MenuItem` entities in a database. It extends the `JpaRepository` interface, which provides common CRUD (create, read, update, delete) operations for JPA entities.\n\n## Interface Methods:\n\n**findByVendorId(Long foodVendorId):**\n\n**Functionality:**\nThis method retrieves a list of `MenuItem` entities based on the specified `foodVendorId`. It returns all menu items associated with the specified food vendor.\n\n**Parameters:**\n* `foodVendorId`: The ID of the food vendor whose menu items are being queried.\n\n**Return Value:**\nA list of `MenuItem` entities associated with the specified food vendor.\n\n**Exceptions:**\n* None.\n\n## Annotations:\n\n**JpaRepository:**\nThis annotation marks the interface as a repository for the `MenuItem` entity, indicating that it should be managed by JPA.\n\n**Note:** Additional methods (inherited from `JpaRepository`) are available for performing CRUD operations on `MenuItem` entities. For more details, refer to the JPA documentation.",
            "file_path": "C:\\Users\\KIIT\\AppData\\Local\\Temp\\T_rex\\main\\java\\com\\axp\\fcs\\repository\\MenuItemRepository.java"
        },
        {
            "documentation": "**Class**\n- **FoodCourtService**\n  - **Purpose**: This class is responsible for managing FoodCourt domain objects, interacting with the database to perform CRUD operations.\n\n**Attributes**\n- **foodCourtRepository**: An instance of FoodCourtRepository, used for interacting with the database.\n\n**Methods**\n- **getActiveFoodCourts**:\n  - **Functionality**: Retrieves a list of active FoodCourt objects from the database.\n  - **Parameters**: None\n  - **Return Value**: A list of FoodCourt objects, filtered by their active status being set to true.\n  - **Logic**: Uses the findByActiveTrue() method of the foodCourtRepository to retrieve active FoodCourt objects.",
            "file_path": "C:\\Users\\KIIT\\AppData\\Local\\Temp\\T_rex\\main\\java\\com\\axp\\fcs\\service\\FoodCourtService.java"
        }
  ]
};